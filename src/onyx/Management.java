/*
 * Management.java
 *
 * Created on 2009. március 20., 21:30
 */
package onyx;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author  PIRI
 */
public class Management extends javax.swing.JPanel implements ActionListener, TableModelListener {

    /** Creates new form Management */
    public Management() {
        this.addComponentListener(Main.foablak);
        jogok = new boolean[6];
        nevsorBetolt();

        initComponents();
    }

    private boolean[] convertRights(int jog) {
        for (int j = 0; j < 6; j++) {
            if ((jog & (int) Math.pow(2, j)) == (int) Math.pow(2, j)) {
                jogok[j] = true;
            } else {
                jogok[j] = false;
            }
        }
        return jogok;
    }

    private void nevsorFrissit() {
//        nevsorBetolt();
        tblManagementList.setModel(new javax.swing.table.DefaultTableModel(tabla, Globals.FEJLEC_MANAGEMENT) {

            Class[] types = new Class[]{
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, true, true, true, true, true, true, true, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        for (int i = 0; i < Globals.OSZLOPMERET_MANAGEMENT.length; i++) {
            tblManagementList.getColumnModel().getColumn(i).setMinWidth(Globals.OSZLOPMERET_MANAGEMENT[i]);
            tblManagementList.getColumnModel().getColumn(i).setMaxWidth(Globals.OSZLOPMERET_MANAGEMENT[i]);
            tblManagementList.getColumnModel().getColumn(i).setPreferredWidth(Globals.OSZLOPMERET_MANAGEMENT[i]);
        }
//        tblManagementList.getModel().addTableModelListener(this);
        btnMentes.setEnabled(false);
        Globals.MENTVE = true;
    }

    private Object[][] nevsorBetolt() {
        lek = new SQLMuvelet(3);
        res = lek.getLekerdezes();
        try {
            if (res == null) { //a lekérdezés nem járt eredménnyel
                JOptionPane.showMessageDialog(this, "A névsor üres!", "Névsor", JOptionPane.INFORMATION_MESSAGE);

            } else {
                res.last();
                int b = res.getRow(); //hány soros a tábla?
                tabla = new Object[b][11]; //tömbök méretének beállítása
                res.beforeFirst();  //kurzor vissza az elejére
                b = 0;                //a tömbmutatóval együtt
                while (res.next()) {
                    tabla[b][0] = res.getInt(1);    //ID mező
                    tabla[b][1] = res.getString(2);  //Név
                    if (res.getString(3) == null || res.getString(3).equals(Globals.URES_DATUM)) {
                        tabla[b][2] = "";
                    } else {
                        tabla[b][2] = res.getString(3); //születési idő
                    }
                    tabla[b][3] = res.getString(4);//loginname
                    tabla[b][4] = res.getString(5);//jelszó
                    jogok = convertRights(res.getInt(6));
                    for (int j = 0; j < 6; j++) {
                        tabla[b][j + 5] = jogok[j];
                    }
                    b++;

                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        lek.close();
        return tabla;
    }

    private Object getAdat(int sor, int oszlop) {
        return tblManagementList.getModel().getValueAt(sor, oszlop);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblManagementList = new javax.swing.JTable();
        btnMentes = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        TableModel model=new DefaultTableModel(tabla, Globals.FEJLEC_MANAGEMENT){
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        tblManagementList.setModel(model );
        RowSorter<TableModel> sorter=new TableRowSorter<TableModel>(model);
        tblManagementList.setRowSorter(sorter);
        tblManagementList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblManagementList.setAutoscrolls(false);
        tblManagementList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblManagementList.getTableHeader().setReorderingAllowed(false);
        for(int i=0;i<Globals.OSZLOPMERET_MANAGEMENT.length;i++){
            tblManagementList.getColumnModel().getColumn(i).setMinWidth(Globals.OSZLOPMERET_MANAGEMENT[i]);
            tblManagementList.getColumnModel().getColumn(i).setMaxWidth(Globals.OSZLOPMERET_MANAGEMENT[i]);
            tblManagementList.getColumnModel().getColumn(i).setPreferredWidth(Globals.OSZLOPMERET_MANAGEMENT[i]);
        }
        tblManagementList.getModel().addTableModelListener(this);
        jScrollPane1.setViewportView(tblManagementList);
        tblManagementList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblManagementList.getColumnModel().getColumn(0).setResizable(false);
        tblManagementList.getColumnModel().getColumn(1).setResizable(false);
        tblManagementList.getColumnModel().getColumn(2).setResizable(false);
        tblManagementList.getColumnModel().getColumn(3).setResizable(false);
        tblManagementList.getColumnModel().getColumn(4).setResizable(false);
        tblManagementList.getColumnModel().getColumn(5).setResizable(false);
        tblManagementList.getColumnModel().getColumn(6).setResizable(false);
        tblManagementList.getColumnModel().getColumn(7).setResizable(false);
        tblManagementList.getColumnModel().getColumn(8).setResizable(false);
        tblManagementList.getColumnModel().getColumn(9).setResizable(false);

        btnMentes.addActionListener(this);
        btnMentes.setActionCommand("mentes");
        btnMentes.setText("Mentés");
        btnMentes.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel1.setText("Management");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 909, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(btnMentes, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(btnMentes)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMentes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblManagementList;
    // End of variables declaration//GEN-END:variables
    private Object[][] tabla;
    private boolean[] jogok;
    private SQLMuvelet lek;
    private ResultSet res;
    private Object adat;
    private Log log=new Log();

//ActionListener implementáció
    public void actionPerformed(ActionEvent e) {

        if (e.getActionCommand().equals("mentes")) {
            boolean nincshiba = true;
            String[] param = new String[4];
            for (int i = 0; i < tabla.length; i++) {
                if (tabla[i][3] != null) {
                    param[0] = tabla[i][3].toString();//felhasználónév
                } else {
                    param[0] = "";
                }
                if (tabla[i][4] != null) {
                    param[1] = tabla[i][4].toString();//jelszó
                } else {
                    param[1] = "";
                }
                int temp = 0;
                for (int j = 0; j < 6; j++) {   //a checkboxokból bináris érték előállítása
                    if (getAdat(i, j + 5).toString().equals("true")) {
                        temp += (int) Math.pow(2, (double) j);
                    }
                }
                param[2] = String.valueOf(temp);//jogosultság
                param[3] = tabla[i][0].toString();//ID
                if (!param[2].equals("0") && param[1].isEmpty()) {
                    //jogot csak felhasználónévvel együtt lehet adni
                    JOptionPane.showMessageDialog(this, "Adja meg a felhasználónevet az ID: " + param[3] + "-hoz!", "Hiba!", JOptionPane.ERROR_MESSAGE);
                    nincshiba = false;
                    break;
                }
                if (nincshiba) {
                    lek = new SQLMuvelet(20, param);
                    if (!lek.setUpdate()) {
                        JOptionPane.showMessageDialog(this, "Hiba az adatok mentése közben!", "Hiba!", JOptionPane.ERROR_MESSAGE);
                    }
                    if(!log.writeLog("Mentve: management"))new Uzenet("Hiba a log írásakor", "Hiba", Uzenet.ERROR);
                }
            }
            if (nincshiba) {
                btnMentes.setEnabled(false);
                Globals.MENTVE = true;
                lek.close();
                nevsorFrissit();
            }
        }
    }
//TableModelListener implementáció

    public void tableChanged(TableModelEvent e) {
        btnMentes.setEnabled(true);
        Globals.MENTVE = false;
        if (e.getType() == TableModelEvent.UPDATE) {
            int sor = e.getFirstRow();
            int oszl = e.getColumn();
            TableModel model = (TableModel) e.getSource();
            adat = model.getValueAt(sor, oszl);
            tabla[sor][oszl] = adat;
            if(!log.writeLog("Változás: management '"+tabla[sor][1]+"'; "+Globals.FEJLEC_MANAGEMENT[oszl]+" új érték: '"+adat+"'"))new Uzenet("Hiba a log írásakor", "Hiba", Uzenet.ERROR);
        }
//        System.out.println(tabla[sor][oszl]);
    }
}

